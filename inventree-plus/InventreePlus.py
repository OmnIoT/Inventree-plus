"""
InventreePlus by OmnIoT
"""

# import required libs
import requests
import json
import hashlib
import hmac
# translation
from django.utils.translation import gettext_lazy as _
# InvenTree plugin libs
from plugin import InvenTreePlugin
from plugin.mixins import SettingsMixin, EventMixin, LocateMixin, LabelPrintingMixin


class InventreePlus(InvenTreePlugin, LocateMixin, EventMixin, SettingsMixin, LabelPrintingMixin):

    AUTHOR = "OmnIoT"
    DESCRIPTION = "Inventree plus integration plugin to enable IoT and advance capabilities to your Inventree self-hosted system."
    VERSION = "0.0.1"

    NAME = "Inventree Plus"
    SLUG = "inventreeplus"
    TITLE = "Inventree Plus"

    SETTINGS = {
        'WEBHOOK_API_KEY': {
            'name': _('Webhook API Key'),
            'description': _('Enter webhook API key generated by OmnIoT'),
            'required': True,
        },
        'HMAC_KEY':{
            'name': _('HMAC key'),
            'description': _('Enter HMAC key for auth'),
            'required': True,
        }
    }

    def submit_webhook(self,data):
        API_KEY = self.get_setting('WEBHOOK_API_KEY')
        HMAC_KEY = self.get_setting('HMAC_KEY')
        # Generate the hash.
        signature = hmac.new(
            HMAC_KEY,
            data,
            hashlib.sha256
        ).hexdigest()
        # create headers and send the request
        headers = {"User-Agent":"Inventree Plus: 0.0.1", "x-signature":signature}
        URL = "https://api.omniot.io/inventreeplus/%s" % API_KEY
        requests.post(URL,data=json.dumps(data), headers=headers)

    def process_event(self, event, *args, **kwargs):
        # process evets triggers
        self.submit_webhook({"action":"event/trigger","event":event, "args":args, "kwargs":kwargs})

    def locate_stock_item(self, item_pk):
        # locate stock item
        from stock.models import StockItem

        try:
            item = StockItem.objects.get(pk=item_pk)
            # StockItem {item_pk} located!
            self.submit_webhook({"action":"locate/stockItem","results":{"located":1,"pk":item_pk}})
            # Tag metadata
            item.set_metadata('located', True)

        except (ValueError, StockItem.DoesNotExist):  # pragma: no cover
            #StockItem ID {item_pk} does not exist!
            self.submit_webhook({"action":"locate/stockItem","results":{"located":0,"pk":item_pk,"item":None}})
            item.set_metadata('located', False)

    def locate_stock_location(self, location_pk):
        # locate stock location
        from stock.models import StockLocation

        try:
            location = StockLocation.objects.get(pk=location_pk)
            self.submit_webhook({"action":"locate/stockLocation","results":{"located":1,"pk":location_pk,"path":location.pathstring}})
            # Tag metadata
            location.set_metadata('located', True)

        except (ValueError, StockLocation.DoesNotExist):  # pragma: no cover
            #Location ID {location_pk} does not exist
            self.submit_webhook({"action":"locate/stockLocation","results":{"located":0,"pk":location_pk,"path":None}})
            location.set_metadata('located', False)

    def print_label(self, **kwargs):
        # send label for printing
        self.submit_webhook({"action":"label/print","results":kwargs})